#!/bin/bash

#
# Steps that need to be done:
#   Find alls disks
#     Check each disk for Linux-Partitions (>2.2 GB)
#     echo found disks
#

function fdisk_l
{
	LANGUAGE=C LANG=C LC_ALL=C fdisk -l "$@"
}

function find_swap_partitions
{
	NOSWAP=""
	checkbootparam "noswap" && NOSWAP="yes"   
	[ -n "$NOSWAP" ] && return 2 # error code 2
	RC=1
	while read p m f relax; 
	do
	  case "$f" in 
		swap)
			echo $p
			RC=0
			;;  
		esac
	done < /etc/fstab
	return $RC
}

function find_swap_partitions2
{
	NOSWAP=""
	checkbootparam "noswap" && NOSWAP="yes"   
	[ -n "$NOSWAP" ] && return 2 # error code 2
	fdisk_l | sed 's/*//g' | grep "swap" | awk '{ print $1 }'
	return 1
}

#
# First lets find all availabe hds (fdisk -l does it for us)
#
# Then we test if partitions with Linux are there and if they are big enough
#
# (we need to elimiate the +, to let awk calculate right)
#
# Output format is: /dev/<hd> space off
#
function find_root_partitions
{
	FIND=$1
	[ -z "$FIND" ] && FIND="nothing"
	fdisk_l | sed 's/*//g' | grep -v "swap" | sed 's/+//g' | awk '/Linux/ { if ($4>='"$ROOT_MIN"') { print $1 " " $4; if ("'"$FIND"'"==$1) { print " on" } else { print " off"}} }'
	if [ -f /proc/mdstat ]
		then
		PARTS=$(file -s /dev/md* | grep -v "swap" | awk -F: '{ print $1 }' | tr \\n "\|" | sed 's%/dev/%%g; s/|$//g')
		[ -n "$PARTS" ] && cat /proc/partitions | awk '/'$PARTS'/ { if ($3>='"$ROOT_MIN"') { print "/dev/" $4 " " $3; if ("'"$FIND"'"=="/dev/"$4) { print " on" } else { print " off"}} }'
	fi
}

#
# Output is suitable to dialog
#

function find_disks
{
	cat /proc/partitions | grep "disc" &>/dev/null # check for devfs
	if [ $? -eq 0 ]; then
		DISKS=$(cat /proc/partitions | awk '{ if ($4!="name") { print $4 } }' | grep "disc");
	else
		DISKS=$(cat /proc/partitions | awk '{ if ($4!="name") { print $4 } }' | egrep -v "[0-9]$");
	fi
	
	for i in $DISKS;
	  do
	  [ -f "/proc/ide/$i/model" ] && MODEL="$(cat /proc/ide/$i/model)" || MODEL=$"model unknown"
	  cat /proc/partitions | awk '{ if ($4=="'$i'") { printf("%s|'"$MODEL"' (%s GB)|off|",$4,($3*1024/1000/1000/1000))}}'
	done
}

function update_swap_parts
{
    find_swap_partitions | grep -v "knoppix.swp" > $TMPDIR/swap1
    find_swap_partitions2 > $TMPDIR/swap2
    SWAP_TO_MK=$(diff $TMPDIR/swap1 $TMPDIR/swap2 | grep ">" | sed 's/> //g' | awk '{ printf("%s Swap off ",$1) }')
    [ -z "$SWAP_TO_MK" ] && return
    checklist $"The following swap-partitions are marked as swap, but are not yet formatted. Check those you want to format. Warning, you'll loose all data on the partition." "Choose partitions to format with swap. Warning: You'll loose all data on that partition." $SWAP_TO_MK
    SWAP_MKLIST="$(sed 's,",,g;s,//, /,g' <$TMP)"
    for i in $SWAP_MKLIST 
	do
      mkswap $i
    done
    swapon -a
}

#
# Note: if someone has noswap in commandline and not enough ram
#   he needs to take care to activate the swap partition, he wants himself!
#
# Fixme: Need a way to mkswap the swap-partitions
#

function check_partition_ok
{
	[ -n "$IGNORE_CHECK" ] && return 0
	# Is swap needed ?
	MEMTOTAL="$(awk '/MemTotal/{print $2}' /proc/meminfo)"
	if [ "$MEMTOTAL" -lt "$MEM_SWAP_NEEDED" ];
		then
    	# Are swap parts availabe ?
		SWAPPARTS=$(find_swap_partitions)
		RC=$?
		SWAPPARTS2=$(find_swap_partitions2)
		[ $RC -eq 1 ] && return 1 # no, we must partition
		if [ $RC -ne 2 ] 
			then
			swapon -a # Activate all swap-partitions in fstab
			if [ "$SWAPPARTS" != "$SWAPPARTS2" ]
				then
				update_swap_parts
			fi
		fi
		SWAPMEMTOTAL="$(awk 'BEGIN{m=0};/partition/{m+=$3};END{print m}' /proc/swaps)"
		[ "$SWAPMEMTOTAL" -lt "$SWAP_MIN" ] && return 1
	fi
	# check for availabe root partitions > 2.2 GB
	[ "$HD_IGNORECHECK" = "yes" ] && ROOT_MIN=0
	ROOT_PARTS=$(find_root_partitions)
	[ -z "$ROOT_PARTS" ] && return 1 # no suitable root partitions found

	return 0 
}

#
# Partition the hard disk
#

function action-part-cfdisk
{
	T1=$"Partitioning harddisk for $FLL_DISTRO_NAME"
	DISKS=$(find_disks)
	IFS='|'
	radiolist $"Here you must choose one of the available disks \n and partition it for $FLL_DISTRO_NAME." $"Choose one disk" $DISKS
	RC=$?
	unset IFS
	[ $RC -eq 1 ] && return 1
	PART="$(cat $TMP)"
	
	cfdisk /dev/$PART
}

function action-part
{
	if [ $DIALOG = "dialog" ]; then
		action-part-cfdisk
	else
		[ -x /usr/bin/gparted ] && gparted || action-part-cfdisk
	fi

	rebuildfstab -r
}

function action-part-later
{
	action-part
	check_partition_ok
}


function menu_part
{
	T1=$"$FLL_DISTRO_NAME Partition-Menu"
	do_menu $"Here you can partition your hard disk" $"Choose an action" "action-part" $"Partition" $"Partition the hard disk" "exit_proc" $"Quit" $"Quit the program"
}
