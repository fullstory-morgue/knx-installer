#!/bin/bash

# Requierements: $1 is the name of a Linux-Kernel
#
# Status: Helper-Function

# Function : Creates a name, suitable for use in BASH-Variables and echos it to stdout

get_short_kernel_name()
{
	echo $1 | tr '.' '_' | tr '-' '_'
}


# Requirements: 
#            HD_FSTYPE, TMPDIR, TARGET_MNT_POINT are correctly set and
#            fstab was already written.
#            Proc must be mounted in TARGET_MNT_POINT
#
#            if BOOT_KERNEL is set, it is used, otherwise it
#            defaults to $(uname -r)
#
# Subfunctions used: chroot_it, mkinitrd

# Function: Creates an initrd

# Expectations:

# The Parameter INITRD_PARAM_$INITRD_POSTIFX is set and must be used in append 
# string if mkext2fs instead of cramfs is used.
#
# Also the INITRD_$INITRD_POSTFIX must be appended to lilo  ...

create_initrd()
{
	# Check for a wanted kernel, otherwise set a default
	[ -z "$BOOT_KERNEL" ] && BOOT_KERNEL=$(uname -r)

	# Setup a postfix-Variable for everything that is going to be used by the outside
	INITRD_POSTFIX=$(get_short_kernel_name "$BOOT_KERNEL")

	#
	# Make the real initrd
	#
	chroot_it mount -t sysfs sysfs /sys
	chroot_it update-initramfs -c -k "$BOOT_KERNEL" 
	chroot_it umount /sys
 
	# Be verbose ...
	[ ! -s "$TARGET_MNT_POINT/boot/initrd.img-$BOOT_KERNEL" ] && return 2
 
	# Set the right variable for make_lilo_conf
	export INITRD_$INITRD_POSTFIX="$INITRD_COMMENT	initrd=/boot/initrd.img-$BOOT_KERNEL"

	# Everything seems to be ok.	
	return 0
}

# Expectations: $LILO_BOOT,$LILO_ROOT,$LILO_VGA, $BOOT_KERNELS
#
# Subfunctions used: module_system_get_cmdlines

# Function: Gives an lilo.conf on stdout

# Assumes: initrd is called initrd.img-$(uname -r)

# TODO: Need a mode to parse SYSTEM_ALIAS
#	for several boot-entries in the same image

# TODO: Need a nice knoppix boot-image

make_lilo_conf()
{

	LILO_INSTALL_MODE="bmp"
	LILO_BITMAP="/boot/debian.bmp"
	LILO_BITMAP_COLORS="1,,0,2,,0"
	LILO_BITMAP_TABLE="120p,173p,1,15,17"
	LILO_BITMAP_TIMER="254p,432p,1,0,0"

	LILO_TIMEOUT="50"

	cat <<EOF
# /etc/lilo.conf - See: 'lilo(8)' and 'lilo.conf(5)',
# ---------------       'install-mbr(8)', '/usr/share/doc/lilo/',
#                       and '/usr/share/doc/mbr/'.

# +---------------------------------------------------------------+
# |                        !! Reminder !!                         |
# |                                                               |
# | Don't forget to run 'lilo' after you make changes to this     |
# | conffile, '/boot/bootmess.txt', or install a new kernel.  The |
# | computer will most likely fail to boot if a kernel-image      |
# | post-install script or you don't remember to run 'lilo'.      |
# |                                                               |
# +---------------------------------------------------------------+

# Support LBA for large hard disks.
#
lba32

# Defines boot-time changes to partition type numbers
change-rules
   reset

# Overrides the default mapping between harddisk names and the BIOS'
# harddisk order. Use with caution.
#disk=/dev/hde
#    bios=0x81

#disk=/dev/sda
#    bios=0x80

# Specifies the boot device.  This is where Lilo installs its boot
# block.  It can be either a partition, or the raw device, in which
# case it installs in the MBR, and will overwrite the current MBR.
#
boot=$LILO_BOOT

# Specifies the device that should be mounted as root. ('/')
#
root=$LILO_ROOT

# Enable map compaction:
# Tries to merge read requests for adjacent sectors into a single
# read request. This drastically reduces load time and keeps the
# map smaller.  Using 'compact' is especially recommended when
# booting from a floppy disk.  It is disabled here by default
# because it doesn't always work.
#
# compact

# Default menu for Debian. (Using the images from debian-bootscreen)
# from Philipp Wolfer <phil@newswriter.org>.
bitmap=$LILO_BITMAP
bmp-colors=$LILO_BITMAP_COLORS
bmp-table=$LILO_BITMAP_TABLE
bmp-timer=$LILO_BITMAP_TIMER

# Install the specified file as the new boot sector.
# LILO supports built in boot sectory, you only need
# to specify the type, choose one from 'text', 'menu' or 'bitmap'.
# new: install=bmp      old: install=/boot/boot-bmp.b
# new: install=text     old: install=/boot/boot-text.b
# new: install=menu     old: install=/boot/boot-menu.b or boot.b
# default: 'menu' is default, unless you have a bitmap= line
# Note: install=bmp must be used to see the bitmap menu.
# install=menu
# install=bmp
install=$LILO_INSTALL_MODE

# Specifies the number of _tenths_ of a second LILO should
# wait before booting the first image.  LILO
# doesn't wait if DELAY is omitted or if DELAY is set to zero.

delay=20

# Prompt to use certaing image. If prompt is specified without timeout,
# boot will not take place unless you hit RETURN
prompt
timeout=$LILO_TIMEOUT

# Specifies the location of the map file. If MAP is
# omitted, a file /boot/map is used.
map=/boot/map

# Specifies the VGA text mode that should be selected when
# booting. The following values are recognized (case is ignored):
#   NORMAL  select normal 80x25 text mode.
#   EXTENDED  select 80x50 text mode. The word EXTENDED can be
#     abbreviated to EXT.
#   ASK  stop and ask for user input (at boot time).
#   <number>  use the corresponding text mode. A list of available modes
#     can be obtained by booting with  vga=ask  and pressing [Enter].
vga=$LILO_VGA

# You can set a password here, and uncomment the 'restricted' lines
# in the image definitions below to make it so that a password must
# be typed to boot anything but a default configuration.  If a
# command line is given, other than one specified by an 'append'
# statement in 'lilo.conf', the password will be required, but a
# standard default boot will not require one.
#
# This will, for instance, prevent anyone with access to the
# console from booting with something like 'Linux init=/bin/sh',
# and thus becoming 'root' without proper authorization.
#
# Note that if you really need this type of security, you will
# likely also want to use 'install-mbr' to reconfigure the MBR
# program, as well as set up your BIOS to disallow booting from
# removable disk or CD-ROM, then put a password on getting into the
# BIOS configuration as well.  Please RTFM 'install-mbr(8)'.
#
# password=tatercounter2000

# You can put a customized boot message up if you like.  If you use
# 'prompt', and this computer may need to reboot unattended, you
# must specify a 'timeout', or it will sit there forever waiting
# for a keypress.  'single-key' goes with the 'alias' lines in the
# 'image' configurations below.  eg: You can press '1' to boot
# 'Linux', '2' to boot 'LinuxOLD', if you uncomment the 'alias'.
#
# message=/boot/bootmess.txt
#	prompt
#	single-key
#	delay=100
#	timeout=100

# Kernel command line options that apply to all installed images go
# here.  See: The 'boot-prompt-HOWO' and 'kernel-parameters.txt' in
# the Linux kernel 'Documentation' directory.
#
# append=""
EOF

	# Create a new cmdline

	LILO_CMDLINE=$(module_system_get_cmdlines)

	# Fallback :-)
	if [ -z "$LILO_CMDLINE" ]
	then
		echo "Warning: Fallback to hardcoded cmdline." 1>&2
		SCSI=$(cat /proc/cmdline | tr ' ' '\n' | grep =scsi |  tr '\n' ' ')
		LILO_CMDLINE="${LILO_INITRD_PARAM}apm=power-off nomce ${SCSI}"
	fi

	[ -r "$TARGET_MNT_POINT/boot/initrd.img" ] && LILO_INITRD="initrd=/boot/initrd.img"
	
	cat <<EOF
# Boot up Linux by default.
#
default="Linux"

image=/boot/vmlinuz
	label="Linux"
	$LILO_INITRD
	append="$LILO_CMDLINE"
	read-only
EOF

	# Add Kernels

	rm -f "$TMPDIR/lilo_entries"

	n=1
	for i in $BOOT_KERNELS; do
		LILO_LABEL="Linux(${i:0:3})-$n" # display it as "Linux(2.4)-1"
		
		if [ "$i" = "$(uname -r)" ]; then
			LILO_DEFAULT_LABEL=$LILO_LABEL
		fi
	
		LILO_INITRD_POSTFIX=$(get_short_kernel_name $i)
	
		LILO_INITRD=$(eval echo \$"INITRD_$LILO_INITRD_POSTFIX")
	
		# Create a new cmdline
	
		LILO_CMDLINE=$(module_system_get_cmdlines)

		# Fallback :-)
		if [ -z "$LILO_CMDLINE" ]; then
			echo "Warning: Fallback to hardcoded cmdline." 1>&2
			SCSI=$(cat /proc/cmdline | tr ' ' '\n' | grep =scsi |  tr '\n' ' ')
			LILO_CMDLINE="${LILO_INITRD_PARAM}apm=power-off nomce ${SCSI}"
		fi
		
		cat >>$TMPDIR/lilo_entries <<EOF
image=/boot/vmlinuz-$i
	label="$LILO_LABEL"
	$LILO_INITRD
	append="$LILO_CMDLINE"
	read-only
	
EOF
		n=$[n+1]
	done
	
	cat $TMPDIR/lilo_entries || return 2 # If the file is not there something, must have gone wrong

	cat <<EOF
# If you have another OS on this machine to boot, you can uncomment the
# following lines, changing the device name on the 'other' line to
# where your other OS' partition is.
#
# other=/dev/hda4
#	label=HURD
#	restricted
#	alias=3
EOF
	# Add other OS' :-)
	# Sorry x86-only for now ... :-/

	while read p m f relax; do
		[ "${p:5:2}" != "fd" ] && case "$f" in
			vfat|msdos)
				[ ${p:8} -le 4 ] && cat << EOF
other=$p
	label="Windows(${p:5})"
EOF
			;;
			ntfs)
				[ ${p:8} -le 4 ] && cat << EOF
other=$p
	label="WinXP/2K(${p:5})"
EOF
			;;
		esac
	done < /etc/fstab

	# Everything went fine :-)
	return 0
}

# Requirements: BOOT_WHERE, BOOT_KERNELS, HD_CHOICE, TARGET_MNT_POINT
#		Proc must be mounted in TARGET_MNT_POINT
#
# Subfunctions used: stringinstring, getbootparam, chroot_it, dd, lilo, make_lilo_conf, module_system_get_cmdlines

# Assumes:
#  We assume that if the HD_CHOICE=/dev/hd[a-d]X the real mbr is on
#  /dev/hda.
#  However this can be a problem for newer machines, which have dynamic mapping.
#  
#  The kernel specification seems to say that other ide-controllers begin with hde, so we assume that this is right.

# Functions: 
#	- Creates /etc/lilo.conf
#	- installs lilo
#	- creates backup of mbr in /boot/knoppix-oldmbr-$(date -I)
#	   (where -I is the ISO-Standard. (Year-Month-Day))
#	- creates /linboot.img for use with boot.ini in NT/Win2k/XP/...

# Expectations: The error codes should be parsed.

# TODO: Needs much more error-handling.
# TODO: BOOT_HD needed!

install_lilo()
{
	if [ "$BOOT_WHERE" = "mbr" ]
	then
        	# create device.map
		grub-install --recheck --no-floppy --root-directory=$TARGET_MNT_POINT /dev/null &>/dev/null
		[ $? -ne 0 ] && grub-install --recheck --no-floppy --root-directory=$TARGET_MNT_POINT /dev/null &>/dev/null
		LILO_BOOT=$(grep "(hd0)" $TARGET_MNT_POINT/boot/grub/device.map | awk '{ print $2 }')

		# fall back

		[ -z "$LILO_BOOT" ] && LILO_BOOT="/dev/$(egrep 'sd|hd' /proc/partitions |awk '{print $4}'|sort|head -1)"

		# Make a backup of the old mbr
		dd if=$LILO_BOOT of=$TARGET_MNT_POINT/boot/knoppix-old-mbr.$(date -I) bs=512 count=1 >/dev/null 2>/dev/null
	else
  		LILO_BOOT=$HD_CHOICE
	fi

	# extract vga mode from CMDLINE
	LILO_DEFVGA="791"
	LILO_VGA=$(getbootparam vga)
	[ -z "$LILO_VGA" ] && LILO_VGA="$LILO_DEFVGA"

	LILO_ROOT="$HD_CHOICE"
	
	make_lilo_conf > $TARGET_MNT_POINT/etc/lilo.conf
	
	[ $? -ne 0 ] && return 2

	# 
	# Do the real lilo installation ...
	#

	# TODO: We _need_ an terminal here
	chroot_it lilo
	
	# copy LILO bootsector to a file (for boot.ini in NT/2k/XP)
	if [ "$LILO_BOOT" = "$HD_CHOICE" ] ; then
		dd if=$LILO_BOOT of=$TARGET_MNT_POINT/linboot.img bs=512 count=1 >/dev/null 2>/dev/null # shut up !
	fi
}

# Function gladly taken from update-grub :)

# Usage: translate_linux_to_grub os_device
# Convert an OS device to the corresponding GRUB drive.
# This part is OS-specific.
translate_linux_to_grub () {
    # First, check if the device file exists.
    if test -e "$1"; then
		:
    else
		echo "$1: Not found or not a block device." 1>&2
		return 1
    fi

	host_os=`uname -s | tr '[A-Z]' '[a-z]'`

    # Break the device name into the disk part and the partition part.
    case "$host_os" in
    linux*)
		tmp_disk=`echo "$1" | sed -e 's%\([sh]d[a-z]\)[0-9]*$%\1%' \
				  -e 's%\(fd[0-9]*\)$%\1%' \
				  -e 's%/part[0-9]*$%/disc%' \
				  -e 's%\(c[0-7]d[0-9]*\).*$%\1%'`
		tmp_part=`echo "$1" | sed -e 's%.*/[sh]d[a-z]\([0-9]*\)$%\1%' \
				  -e 's%.*/fd[0-9]*$%%' \
				  -e 's%.*/floppy/[0-9]*$%%' \
				  -e 's%.*/\(disc\|part\([0-9]*\)\)$%\2%' \
				  -e 's%.*c[0-7]d[0-9]*p*%%'`
	;;
    gnu*)
		tmp_disk=`echo "$1" | sed 's%\([sh]d[0-9]*\).*%\1%'`
		tmp_part=`echo "$1" | sed "s%$tmp_disk%%"` ;;
    freebsd*)
		tmp_disk=`echo "$1" | sed 's%r\{0,1\}\([saw]d[0-9]*\).*$%r\1%' \
			    | sed 's%r\{0,1\}\(da[0-9]*\).*$%r\1%'`
		tmp_part=`echo "$1" \
	    		| sed "s%.*/r\{0,1\}[saw]d[0-9]\(s[0-9]*[a-h]\)%\1%" \
       	    	| sed "s%.*/r\{0,1\}da[0-9]\(s[0-9]*[a-h]\)%\1%"`
	;;
    netbsd*)
		tmp_disk=`echo "$1" | sed 's%r\{0,1\}\([sw]d[0-9]*\).*$%r\1d%' \
	    		| sed 's%r\{0,1\}\(fd[0-9]*\).*$%r\1a%'`
		tmp_part=`echo "$1" \
	    		| sed "s%.*/r\{0,1\}[sw]d[0-9]\([abe-p]\)%\1%"`
	;;
    *)
		echo "update-grub does not support your OS yet." 1>&2
		return 1
    esac

    # Get the drive name.
    tmp_drive=`grep -v '^#' $device_map | grep "$tmp_disk *$" \
			| sed 's%.*\(([hf]d[0-9][a-g0-9,]*)\).*%\1%'`

    # If not found, print an error message and exit.
    if test "x$tmp_drive" = x; then
		echo "$1 does not have any corresponding BIOS drive." 1>&2
		return 1
    fi

    if test "x$tmp_part" != x; then
		# If a partition is specified, we need to translate it into the
		# GRUB's syntax.
		case "$host_os" in
		linux*)
	    	echo "$tmp_drive" | sed "s%)$%,`expr $tmp_part - 1`)%" ;;
		gnu*)
	    	if echo $tmp_part | grep "^s" >/dev/null; then
				tmp_pc_slice=`echo $tmp_part \
		    		| sed "s%s\([0-9]*\)[a-g]*$%\1%"`
				tmp_drive=`echo "$tmp_drive" \
		    		| sed "s%)%,\`expr "$tmp_pc_slice" - 1\`)%"`
	    	fi
	    	if echo $tmp_part | grep "[a-g]$" >/dev/null; then
				tmp_bsd_partition=`echo "$tmp_part" \
		    		| sed "s%[^a-g]*\([a-g]\)$%\1%"`
				tmp_drive=`echo "$tmp_drive" \
		    		| sed "s%)%,$tmp_bsd_partition)%"`
	    	fi
	    	echo "$tmp_drive" ;;
		freebsd*)
	    	if echo $tmp_part | grep "^s" >/dev/null; then
				tmp_pc_slice=`echo $tmp_part \
		    		| sed "s%s\([0-9]*\)[a-h]*$%\1%"`
				tmp_drive=`echo "$tmp_drive" \
		    		| sed "s%)%,\`expr "$tmp_pc_slice" - 1\`)%"`
	    	fi
	    	if echo $tmp_part | grep "[a-h]$" >/dev/null; then
				tmp_bsd_partition=`echo "$tmp_part" \
		    		| sed "s%s\{0,1\}[0-9]*\([a-h]\)$%\1%"`
				tmp_drive=`echo "$tmp_drive" \
		    		| sed "s%)%,$tmp_bsd_partition)%"`
	    	fi
	    	echo "$tmp_drive" ;;
		netbsd*)
	    	if echo $tmp_part | grep "^[abe-p]$" >/dev/null; then
				tmp_bsd_partition=`echo "$tmp_part" \
		    		| sed "s%\([a-p]\)$%\1%"`
				tmp_drive=`echo "$tmp_drive" \
		    		| sed "s%)%,$tmp_bsd_partition)%"`
	    	fi
	    	echo "$tmp_drive" ;;
		esac
    else
		# If no partition is specified, just print the drive name.
		echo "$tmp_drive"
    fi

    return 0
}


install_grub()
{
    root_partition=$(echo ${HD_CHOICE} |cut -d"'" -f2)
    root_device="${root_partition:0:8}"
    device=$(echo $root_device|cut -d / -f3)
    usb_dev=$(cat /sys/block/${device}/dev)

    if [ "${usb_dev1}" !=  "8:0" ]; then
    #
        # USB install must have first Grub on partition
        BOOT_WHERE="partition"
    else
        # in case of jfs/xfs force installation to mbr - usually not needed
        # but only if HD is not on USB

        case $FS_TYPE in
            jfs|xfs) BOOT_WHERE="mbr";;
        esac

    fi

	# create device.map
	grub-install --recheck --no-floppy --root-directory=$TARGET_MNT_POINT /dev/null &>/dev/null
	[ $? -ne 0 ] && grub-install --recheck --no-floppy --root-directory=$TARGET_MNT_POINT /dev/null &>/dev/null
	export device_map=$TARGET_MNT_POINT/boot/grub/device.map

	if [ "$BOOT_WHERE" = "mbr" ]
	then
		GRUB_MBR=$(grep "(hd0)" $TARGET_MNT_POINT/boot/grub/device.map | awk '{ print $2 }')
		[ -z "$GRUB_MBR" ] && return 1
		# Make a backup of the old mbr
		dd if=$GRUB_MBR of=$TARGET_MNT_POINT/boot/knoppix-old-mbr.$(date -I) bs=512 count=1 >/dev/null 2>/dev/null
	fi

	# Create initital menu.lst
	
	# rm -f $TARGET_MNT_POINT/boot/grub/menu.lst
    	(cd $TARGET_MNT_POINT/boot; ln -sf initrd.img-$BOOT_RUNNING_KERNEL initrd.img)
	chroot_it update-grub -y >/dev/null 2>/dev/null

	# change menu.lst
    # TODO other languages
	# Add german keybindings 
	case "$LANG" in
		de*|at*|ch*)
			cp -f $TARGET_MNT_POINT/boot/grub/menu.lst $TMPDIR/menu.lst
			cat > $TARGET_MNT_POINT/boot/grub/menu.lst << EOF
# Deutsche Tastaturbelegung
setkey y z
setkey z y
setkey Y Z
setkey Z Y
setkey equal parenright
setkey parenright parenleft
setkey parenleft asterisk
setkey doublequote at
setkey plus bracketright
setkey minus slash
setkey slash ampersand
setkey ampersand percent
setkey percent caret
setkey underscore question
setkey question underscore
setkey semicolon less
setkey less numbersign
setkey numbersign backslash
setkey colon greater
setkey greater bar
setkey asterisk braceright
EOF
	cat $TMPDIR/menu.lst >> $TARGET_MNT_POINT/boot/grub/menu.lst
		;;
	esac

	# no alternatives please
	perl -pi -e 's/^# alternative=true/# alternative=false/g' $TARGET_MNT_POINT/boot/grub/menu.lst
	# save the default setting
	perl -pi -e 's/^default .*/default saved/g' $TARGET_MNT_POINT/boot/grub/menu.lst

	# add graphical menu
	# if there is a "/boot" mounted then this is grub root
	# otherwise we have /boot over the / partition
	bootpart=
	for i in $HD_MAP; do
		point=$(echo $i | cut -d":" -f2)
		if [ "$point" = "/boot" ]; then
			bootpart=$(echo $i | cut -d":" -f1)
            break
		fi
	done

	# bad handle boot partition
	if [ -n "$bootpart" ]; then
		GROOT=$(translate_linux_to_grub $bootpart)
	else
		export device_map=$TARGET_MNT_POINT/boot/grub/device.map
		export kernel_vers=$(uname -r)
		root_device=$(grep "^kernel.*${kernel_ver}.*root=" $TARGET_MNT_POINT/boot/grub/menu.lst |\
			grep -v "single" |\
			sed 's#^kernel.*root=##'|sed 's# .*$##')
		GROOT=$(translate_linux_to_grub $root_device)
	fi
	if [ -n "$GROOT" -a -s $TARGET_MNT_POINT/boot/message ]; then
		if { mount | grep -q $TARGET_MNT_POINT/boot ; }; then
			perl -pi -e "s|^color (.*)|color \1\ngfxmenu $GROOT/message|g" $TARGET_MNT_POINT/boot/grub/menu.lst
		else
			perl -pi -e "s|^color (.*)|color \1\ngfxmenu $GROOT/boot/message|g" $TARGET_MNT_POINT/boot/grub/menu.lst
		fi
	fi

	perl -pi -e "s|^root.*$|root\t\t${GROOT}|" $TARGET_MNT_POINT/boot/grub/menu.lst
	perl -pi -e "s|^# groot=.*$|# groot=${GROOT}|" $TARGET_MNT_POINT/boot/grub/menu.lst

	# Create a new cmdline
	
	GRUB_CMDLINE=$(module_system_get_cmdlines)
	
	# Fallback :-)
	if [ -z "$GRUB_CMDLINE" ]
	then
		echo "Warning: Fallback to hardcoded cmdline." 1>&2
		SCSI=$(cat /proc/cmdline | tr ' ' '\n' | grep =scsi |  tr '\n' ' ')
		GRUB_CMDLINE="ramdisk_size=100000 apm=power-off nomce ${SCSI}"
	fi

	# extract vga mode from CMDLINE
	GRUB_DEFVGA="791"
	GRUB_VGA=$(getbootparam vga)
	[ -z "$GRUB_VGA" ] && GRUB_VGA="$GRUB_DEFVGA"

	GRUB_CMDLINE="$GRUB_CMDLINE vga=$GRUB_VGA"
	perl -pi -e "s|^# kopt=root=(.*) ro|# kopt=root=\1 ro $GRUB_CMDLINE|g" $TARGET_MNT_POINT/boot/grub/menu.lst
	perl -pi -e "s|^kernel(.*) ro|kernel\1 ro $GRUB_CMDLINE|g" $TARGET_MNT_POINT/boot/grub/menu.lst

	# Add other OS' :-)
	# Sorry x86-only for now ... :-/

	export device_map=$TARGET_MNT_POINT/boot/grub/device.map

	while read p m f relax;
	do
		[ "${p:5:2}" != "fd" ] && case "$f" in
			vfat|msdos)
				gp=$(translate_linux_to_grub $p) || continue
				[ ${p:8} -le 4 ] && cat << EOF
title Windows 95/98/ME (${p:5})
root $gp
makeactive
chainloader +1
EOF
			;;
			ntfs)
				gp=$(translate_linux_to_grub $p) || continue
				[ ${p:8} -le 4 ] && cat << EOF
title Windows 2K/XP/2003 (${p:5})
chainloader $gp+1
EOF
			;;
		esac
	done < /etc/fstab >> $TARGET_MNT_POINT/boot/grub/menu.lst

	# hook update-grub -y into the kernel installing chain
cat << EOF > "$TARGET_MNT_POINT/etc/kernel-img.conf"
# Kernel Image management overrides
# See kernel-img.conf(5) for details
do_symlinks = Yes
postinst_hook = /usr/sbin/update-grub
postrm_hook = /usr/sbin/update-grub
do_bootloader = no
do_initrd = Yes
relative_links = Yes
EOF

	# install grub
	
	# in case of jfs/xfs force installation to mbr - usually not needed

	case $FS_TYPE in
		jfs|xfs) BOOT_WHERE="mbr";;
	esac

	# install now
		
	case $BOOT_WHERE in
		partition)
			grub-install --root-directory=$TARGET_MNT_POINT "$HD_CHOICE" >/dev/null 2>/dev/null || \
			grub-install --root-directory=$TARGET_MNT_POINT "$HD_CHOICE" >/dev/null 2>/dev/null
			;;
		mbr)
			grub-install --root-directory=$TARGET_MNT_POINT "(hd0)" >/dev/null 2>/dev/null
			;;
	esac

	return 0
}

# Requierements: $BOOT_WHERE, $TARGET_MNT_POINT
#
# Subfunctions:	create_initrd
#		install_lilo

# Assumes: There are no errors ( for now ;-) )
#	   There is no kernel bigger than 10 ...

# Functions: Mounts and umounts /proc
#	Creates initrd for each kernel 
#       and installs the bootmanager lilo.


add_bootmanager()
{
	BOOTMANAGER_PROC=""
	mount --bind /proc $TARGET_MNT_POINT/proc && BOOTMANAGER_PROC="yes"
	
	BOOT_KERNELS=""
	for i in $TARGET_MNT_POINT/lib/modules/?.*
	do
		BOOT_KERNEL=$(basename $i)
		BOOT_KERNELS="$BOOT_KERNELS $BOOT_KERNEL"
		# update_status $"Creating initrd for kernel $BOOT_KERNEL ..."
		create_initrd
	done

	BOOT_RUNNING_KERNEL="$(uname -r)"
	# If the running kernel can't be found
	# set the default to the first available
	if ! stringinstring "$BOOT_RUNNING_KERNEL" "$BOOT_KERNELS"
	then
		set -- $BOOT_KERNELS
		BOOT_RUNNING_KERNEL="$1"
	fi

	# TODO: Add error handler

	# update_status $"Installing $BOOT_LOADER to $BOOT_WHERE"

	if [ "$BOOT_LOADER" = "grub" ]
	then
		install_grub
	else
		ln -sf vmlinuz-$BOOT_RUNNING_KERNEL $TARGET_MNT_POINT/boot/vmlinuz
		ln -sf /boot/vmlinuz $TARGET_MNT_POINT/vmlinuz
		[ -e $TARGET_MNT_POINT/boot/initrd.img-$BOOT_RUNNING_KERNEL ] && \
			ln -sf initrd.img-$BOOT_RUNNING_KERNEL $TARGET_MNT_POINT/boot/initrd.img
		[ -e $TARGET_MNT_POINT/boot/System.map-$BOOT_RUNNING_KERNEL ] && \
			ln -sf System.map-$BOOT_RUNNING_KERNEL $TARGET_MNT_POINT/boot/System.map
		install_lilo
	fi
	# TODO: Add error handler

	update_status $"Finishing installation"
	[ -n "$BOOTMANAGER_PROC" ] && umount $TARGET_MNT_POINT/proc
}

# -------------------------
function fix_grub_for_UUID
{
	local menuList
	local rootDevice
	local BACKUP

	debugit "fix_grub_for_UUID"
	menuList="${TARGET_MNT_POINT}/boot/grub/menu.lst"
	debugit "menuList=\"$menuList\""
	rootDevice=$(grep '^# kopt=root=' ${menuList}|sed 's/^# kopt=root=//'|sed 's/ .*$//')
	debugit "rootDevice=\"$rootDevice\""

	#1. Make a backup of the old one
	if grep -q root\=\\/dev\\/[hs]d[a-z][1-9][0-9]\\? ${menuList}; then

		if [ ${debug_it} -eq 1 ];  then
			debugit "grep succeeded"
			BACKUP="$(mktemp -p ${TARGET_MNT_POINT}/boot/grub/ menu.lst.XXXXXXXXXX)"
			cat ${menuList} > "$BACKUP"
		fi

		sed -i "s%root\=$rootDevice%root\=UUID\=$(/lib/udev/vol_id -u $rootDevice)%" ${menuList}
	else
		debugit "grep failed"
	fi
	# sed -i "s%root\=$rootDevice%root\=UUID\=$(/lib/udev/vol_id -u $rootDevice)%" ${menuList}
}
# -------------------------
function appendGrubForOtherOS
{
	local TempFile
	local TempDir
	local GRUBFile
	local mounted_grub_file
	local found
	local menuList

	menuList="${TARGET_MNT_POINT}/boot/grub/menu.lst"

	TempFile="$(mktemp -p /tmp/ .XXXXXXXXXX)"
	MyGrubTemp="$(mktemp -p /tmp/ myGrub.XXXXXXXXXX)"
	TempDir=/tmp/knx-installer_tempdir
	GRUBFile="/boot/grub/menu.lst"
	mounted_grub_file="${TempDir}${GRUBFile}"
	mkdir -p $TempDir

	os-prober > $TempFile

	while IFS=: read device longName shortName kindOf; do
		# skip current root device
		if [ "$device" != "$HD_CHOICE" ]; then
			if [ "$kindOf" = "linux" ]; then
				mount $device $TempDir 2>&1 >>/dev/null
				if [ $? -eq 0 ] ; then
					if [ -r "$mounted_grub_file" ]; then
						found=0
						while read line; do
                            # well we take the first kernel found 
                            # and dont care this is the default one or not
                            #skip comented lines
							if [[ $line =~ "^title.*" ]]; then
								if [ $found -eq 0 ] ;then
									found=1
                                    # one empty line
                                    echo >> "$MyGrubTemp"
                                    # and remove the word [D,d]efault it it's there
                                    echo $(echo $line | \
										sed -e 's#[D,d]efault##') \(${device:5}\) >> "$MyGrubTemp"
								else
									break
								fi
							else
                                # skip uninteresting lines
                                # remove leading spaces..
                                line=$(echo "$line" | sed -e 's/^[ \t]*//' )
								test $found -eq 1 && echo $line | grep -v '^#' >> "$MyGrubTemp"
							fi
						done < "$mounted_grub_file"
					fi
					umount $TempDir
				fi
			else
				# elif [ "$kindOf" = "windows" ]; then
				#     
				#else
				# place for other OS's
				:
			fi
		fi
	done < "$TempFile"
	# do it
	cat $MyGrubTemp >> $menuList
	# clean up
	rm $TempFile $MyGrubTemp
    rmdir $TempDir
}
# -------------------------
function fix-usb-install-intern
{
    local root_partition
    local root_device
    local device
    local usb_dev
    local grub_dir
    local menu_lst
    local device_map
    local old_mbr_device
    local old_hdmap_dev
    local old_hd_map_dev

    root_partition=$(echo ${HD_CHOICE} |cut -d"'" -f2)
    root_device="${root_partition:0:8}"
    device=$(echo $root_device|cut -d / -f3)
    usb_dev=$(cat /sys/block/${device}/dev )
    if [ "${usb_dev}" !=  "8:0"  ]; then
        # nothing to do
        :
    else  # its an USB install
        grub_dir="${TARGET_MNT_POINT}/boot/grub"
        device_map="${grub_dir}/device.map"
        menu_lst="${grub_dir}/menu.lst"
        old_mbr_device=$(awk '/hd0/{print $2}' ${device_map})
        old_hdmap_dev=$(grep ${root_device} ${device_map}|awk '{print $1}')
        # get rid of () on the hd_map
        old_hd_map_dev=$(echo ${old_hdmap_dev} |sed -e "s/[\(,\)]//g")

        if [ "$BOOT_WHERE" = "mbr" ]; then
            # reset_MBR
            lilo -M ${old_mbr_device} -s /dev/null
        fi
        
        # install grub on MBR of the USB device
        grub-install --root-directory=${TARGET_MNT_POINT} $ROOT_DEVICE 2>/dev/null 1>/dev/null

        # fix the device.map file
        sed -i -e "s|(hd0)|(hdX)|" -e "s|${old_hdmap_dev}|(hd0)|" \
            -e "s|(hdX)|${old_hdmap_dev}|" ${device_map}

        # fix the menu.lst
        sed -i -e "s|hd0|hdX|" -e "s|${old_hd_map_dev}\,|hd0,|" \
           -e "s|hdX|${old_hd_map_dev}|" ${menu_lst}
    fi
}
