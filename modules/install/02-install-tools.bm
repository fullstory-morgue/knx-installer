#!/bin/bash

# Find changes in (real) files of dir1 ... dir2
# function taken from saveconfig
system_findchanged(){
	if [ -d "$1" ]; then
		for i in $( cd "$1"; find . -type f | sed 's,^\./,,g' | grep -v ' ' ); do
			cmp -s "$1/$i" "$2/$i" || echo "$1/$i"
		done
	elif [ -e "$1" ]; then
			cmp -s "$1" "$2" || echo "$1"
	fi
}

system_copy_etc()
{
	update_status $"Copying custom configuration ..."
	
	# copy changed files in /etc
	( cd "$TARGET_MNT_POINT"; system_findchanged /etc "$FLL_MOUNTPOINT"/etc | \
		egrep -v "fstab|passwd|shadow|group" | tar -T - -cf - | tar xf - ) 2>/dev/null

}

system_copy_home()
{
	update_status $"Copying home directory ..."
	
	#copy home directory from running user
	#check if already data is there then stop
	if [ -d "$TARGET_MNT_POINT/home/$USER_NAME" ]; then
		chroot "$TARGET_MNT_POINT" chown -R "$USER_NAME":"$USER_NAME" "/home/$USER_NAME"
		return 0
	fi

	# does testing for .kde _really_ make any sense here?
	if [ -d "/home/$DEFAULT_USER/.kde" ]; then
		rm -rf "$TARGET_MNT_POINT/home/$DEFAULT_USER"
		cp -a "/home/$DEFAULT_USER" "$TARGET_MNT_POINT/home"
		if [ "$USER_NAME" != "$DEFAULT_USER" ]; then
			mv "$TARGET_MNT_POINT/home/$DEFAULT_USER" "$TARGET_MNT_POINT/home/$USER_NAME"
		fi
	else
		cp -a "$TARGET_MNT_POINT/etc/skel" "$TARGET_MNT_POINT/home"
		mv "$TARGET_MNT_POINT/home/skel" "$TARGET_MNT_POINT/home/$USER_NAME"
	fi

	# Mozilla Konfigdateien korrigieren
	if [ "$USER_NAME" != "$DEFAULT_USER" ];	then
		rm -f "$TARGET_MNT_POINT/home/$USER_NAME/.mozilla/appreg"
		rm -f "$TARGET_MNT_POINT/home/$USER_NAME/.mozilla/pluginreg.dat"
		# TODO: Test if symlink works ...
		if [ -e "$TARGET_MNT_POINT/home/$USER_NAME/.mozilla/$DEFAULT_USER" ]; then
			if [ ! -e "$TARGET_MNT_POINT/home/$USER_NAME/.mozilla/default" ]; then
				mv "$TARGET_MNT_POINT/home/$USER_NAME/.mozilla/$DEFAULT_USER" \
					"$TARGET_MNT_POINT/home/$USER_NAME/.mozilla/default"
			fi
			perl -pi -e 's/.*general.useragent.*\n?//' \
				"$TARGET_MNT_POINT/home/$USER_NAME/.mozilla/default/*/prefs.js"
		fi

		# Bei unterschiedlichem OLD/NEWHOME muss man die Pfade anpassen
		# sonst funktionieren die Anwendungen nicht korrekt
		OLDHOME="/home/$DEFAULT_USER"
		NEWHOME="/home/$USER_NAME"
		PART="$TARGET_MNT_POINT"
		for f in $(find "$PART$NEWHOME" -exec grep -ls "$OLDHOME" {} \;|grep -v $0); do
			perl -pi -e "s|$OLDHOME|$NEWHOME|g" "$f"
		done
	fi

	# Neue Symbole fÃ¼r KANOTIX und KNOPPIX auf dem Desktop
	if [ -e "$TARGET_MNT_POINT/home/$USER_NAME/Desktop/sidux.desktop" ]; then
		cat >"$TARGET_MNT_POINT/home/$USER_NAME/Desktop/sidux.desktop" <<EOF
[Desktop Entry]
Name=sidux
# Exec=kfmclient openProfile webbrowsing http://sidux.com/
Exec=konqueror --geometry 800x600+110+40 http://sidux.com/
Type=Application
Icon=html
Terminal=0
EOF
	fi

	# stop loading browser
	if [ -f "$TARGET_MNT_POINT/home/$USER_NAME/.kde/Autostart/showindex.desktop" ]; then
		rm -f "$TARGET_MNT_POINT/home/$USER_NAME/.kde/Autostart/showindex.desktop"
	fi

	# revert to plain debian .bashrc
	cat "$TARGET_MNT_POINT/etc/skel/.bashrc" > "$TARGET_MNT_POINT/home/$USER_NAME/.bashrc"
	
	# revert kdesu/sudo workaround
	if grep -q sudo "$TARGET_MNT_POINT/home/$USER_NAME/.kde/share/config/kdesurc" 2>/dev/null; then
		rm -f "$TARGET_MNT_POINT/home/$USER_NAME/.kde/share/config/kdesurc"
	fi

	# force kde first time configuration
	if [ -f /etc/skel/.kde/share/config/kpersonalizerrc ]; then
		perl -pi -e 's/FirstLogin=false/FirstLogin=true/g' \
			"$TARGET_MNT_POINT/etc/skel/.kde/share/config/kpersonalizerrc"

		# The users kde should be perfect, unless we just copied from template ...
		if [ ! -d "/home/$DEFAULT_USER/.kde" ]; then
			perl -pi -e 's/FirstLogin=false/FirstLogin=true/g' \
				"$TARGET_MNT_POINT/home/$USER_NAME/.kde/share/config/kpersonalizerrc"
		fi
	fi
	
	chroot "$TARGET_MNT_POINT" chown -R "$USER_NAME":"$USER_NAME" "/home/$USER_NAME"
}

system_purge_live_only_stuff()
{
	# purge live-specific packages
	chroot_it dpkg --purge	autofs \
				checkmem \
				busybox \
				fix-cdrom \
				initscripts-sidux-live \
				firewall-sidux \
				sidux-setpassword \
				sidux-terminalserver \
				install-gui \
				knxinstaller \
				knx-installer \
				kde-services-sidux \
				live-initrd-sidux \
				mkdosswapfile \
				mknbi \
				mkpersistenthome \
				restartx \
				sambastart-sidux \
				saveconfig \
				startsyslog-sidux \
				sudoers-sidux \
				syslinux \
				tftpd-hpa \
				xsession-sidux \
				xf86config-sidux &> /dev/null
	
	#  disable live config
	if [ -f "$TARGET_MNT_POINT/etc/default/distro" ]; then
		perl -pi -e "s/^FLL_DISTRO_MODE\=.*/FLL_DISTRO_MODE\=\"installed\"/" \
			"$TARGET_MNT_POINT/etc/default/distro"
	fi

	# remove temporary kde- user files
	debugit "remove temporary kde- user files"
	rm -f "$TARGET_MNT_POINT/home/$USER_NAME/.DCOPserver_*_*"
	debugit "ReturnCode 1: \"$?\""
	rm -f "$TARGET_MNT_POINT/home/$USER_NAME/.kde/cache-*"
	debugit "ReturnCode 2: \"$?\""
	rm -f "$TARGET_MNT_POINT/home/$USER_NAME/.kde/socket-*"
	debugit "ReturnCode 3: \"$?\""
	rm -f "$TARGET_MNT_POINT/home/$USER_NAME/.kde/tmp-*"
	debugit "ReturnCode 4: \"$?\""
	rm -f "$TARGET_MNT_POINT/home/$USER_NAME/.*uthority"
	# get rid of it...
	rm -rf "$TARGET_MNT_POINT/etc/sysconfig"
	debugit "ReturnCode 5: \"$?\""
	rm -f "$TARGET_MNT_POINT/home/$USER_NAME/Desktop/install-gui.desktop" 
	debugit "ReturnCode 6: \"$?\""
}

system_update_files()
{
	# update /etc/motd
	echo -e $"Welcome to $FLL_DISTRO_NAME" "(Kernel $(uname -r))\n" > "$TARGET_MNT_POINT/etc/motd"

	# hostname
	sed -i '/localhost/!s/^\(127.0.0.1[ \t]\+\)\(.\+\)$/\1'"$HOST_NAME"'/' \
		"$TARGET_MNT_POINT/etc/hosts"
	echo "$HOST_NAME" > "$TARGET_MNT_POINT/etc/hostname"
	echo "$HOST_NAME" > "$TARGET_MNT_POINT/etc/mailname"

	# don't allow everyone to use sudo.
	cat "$TARGET_MNT_POINT/usr/share/base-files/profile" > "$TARGET_MNT_POINT/etc/profile"
	
	# also fix sudoers
	cat > "$TARGET_MNT_POINT/etc/sudoers" <<EOF
# /etc/sudoers
#
# This file MUST be edited with the 'visudo' command as root.
#
# See the man page for details on how to write a sudoers file.
#

Defaults	env_reset

# Host alias specification

# User alias specification

# Cmnd alias specification

# User privilege specification
root	ALL=(ALL) ALL
EOF
	chown root:root "$TARGET_MNT_POINT/etc/sudoers"
	chmod 0440 "$TARGET_MNT_POINT/etc/sudoers"

	# "normalize" /etc/inittab
	cp -f "$TARGET_MNT_POINT/usr/share/sysvinit/inittab" "$TARGET_MNT_POINT/etc/inittab"
	perl -pi -e 's#^([2-6]):23:respawn#$1:2345:respawn#;s#id:[0-6]:initdefault:#id:5:initdefault:#' \
		"$TARGET_MNT_POINT/etc/inittab"
	
	# create "real" /tmp with mode 1777
	rm -f "$TARGET_MNT_POINT/tmp" 2>/dev/null
	mkdir -p "$TARGET_MNT_POINT/tmp"
	chmod 1777 "$TARGET_MNT_POINT/tmp"

	# create /etc/mtab as a regular file
	rm -f "$TARGET_MNT_POINT/etc/mtab"
	touch "$TARGET_MNT_POINT/etc/mtab"

	# update menu entries
	chroot_it update-menus

	# Save ALSA sound volume
	if [ -e /proc/asound/modules ] && [ -x /usr/sbin/alsactl ]; then
		/usr/sbin/alsactl store
		if [ -f /var/lib/alsa/asound.state ]; then
			cp /var/lib/alsa/asound.state "$TARGET_MNT_POINT/var/lib/alsa"
		fi
	fi
	
	# set KDM wallapaper
	if [ -e "$FLL_WALLPAPER" ] && [ -d "$TARGET_MNT_POINT/etc/default/kdm.d" ]; then
		# possible overrides: USEBACKGROUND BACKGROUNDCFG USETHEME THEME WALLPAPER
		# requires kdm >= 4:3.5.5a.dfsg.1-6
		echo "WALLPAPER=\"$FLL_WALLPAPER\"" > "$TARGET_MNT_POINT/etc/default/kdm.d/sidux_wallpaper"
	fi
}

system_services()
{
	local SERVICE_WHITELIST=(
		alsa
		alsa-utils
		aumix
		avahi-daemon
		atd
		bootclean
		bootlogd
		bootmisc.sh
		capiutils
		checkfs.sh
		checkroot.sh
		console-screen.sh
		console-screen.kbd.sh
		cron
		cupsys
		dbus
		etc-setserial
		fuse-utils
		glibc.sh
		halt
		hibernate
		hostname.sh
		hotkey-setup
		hwclock.sh
		hwclockfirst.sh
		ifupdown
		ifupdown-clean
		isdnactivecards
		keymap.sh
		kill-uswsusp-image
		killprocs
		klogd
		module-init-tools
		modutils
		mountall-bootclean.sh
		mountall.sh
		mountdevsubfs.sh
		mountkernfs.sh
		mountnfs-bootclean.sh
		mountnfs.sh
		mtab.sh
		networking
		pcmciautils
		ppp
		pppd-dns
		procps.sh
		rc.local
		reboot
		rmnologin
		screen-cleanup
		sendsigs
		setserial
		single
		stop-bootlogd
		stop-bootlogd-single
		sudo
		sysklogd
		udev
		udev-mtab
		umountfs
		umountnfs.sh
		umountroot
		urandom
		vbesave
		wpa-ifupdown
		x11-common
	)

	if [ -x /etc/init.d/acpid ]; then
		if [ -d /proc/acpi ]; then
			SERVICE_WHITELIST+=( acpid )
			if [ -x /etc/init.d/acpi-support ]; then
				# add acpi-support for laptops
				if laptop-detect &>/dev/null; then
					SERVICE_WHITELIST+=( acpi-support )
				else
					chroot_it dpkg --purge acpi-support
					rm -rf "$TARGET_MNT_POINT/var/lib/acpi-support/"
				fi
			fi
		else
			: #chroot_it dpkg --purge acpid
		fi
	fi

	if [ -x /etc/init.d/powersaved ]; then
		if pidof powersaved &>/dev/null; then
			SERVICE_WHITELIST+=( powersaved )
			# reverse live-mode inhibition of suspend
			if [ -w $TARGET_MNT_POINT/etc/powersave/sleep ]; then
				sed -i 's/^\(DISABLE_USER_SUSPEND2.*\)=.*$/\1=""/' \
					"$TARGET_MNT_POINT/etc/powersave/sleep"
			fi
		else
			: #chroot_it dpkg --purge powersaved => kpowersave currently depends on this
		fi
	elif [ -x /etc/init.d/powernowd ]; then
		if pidof powernowd &>/dev/null; then
			SERVICE_WHITELIST+=( powernowd )
		else
			: #chroot_it dpkg --purge powernowd
		fi
	fi

	if [ -x /etc/init.d/bluetooth ]; then
		if pidof hcid &>/dev/null || pidof sdpd &>/dev/null; then
			SERVICE_WHITELIST+=( bluetooth )
		else
			: #chroot_it dpkg --purge bluez-utils
		fi
	fi

	if [ -x /usr/sbin/915resolution ]; then
		if 915resolution -l &>/dev/null; then
			SERVICE_WHITELIST+=( 915resolution )
		else
			chroot_it dpkg --purge 915resolution
		fi
	fi

	# enable splashy, if installed
	if [ -x /etc/init.d/splashy-init ]; then
		chroot_it mkfifo --mode=0700 /etc/splashy/splashy.fifo 2>/dev/null
		SERVICE_WHITELIST+=( splashy-init )
	fi
	
	# add a display manager or two to the array
	for DM in kdm gdm wdm xdm; do
		if [ -x /etc/init.d/"$DM" ]; then
			SERVICE_WHITELIST+=( "$DM" )
			
			# diverge from debian's plain runlevels and follow the lsb
			chroot_it update-rc.d -f "$DM" remove
			chroot_it update-rc.d "$DM" start 99 5 . stop 01 0 1 2 3 4 6 .
		fi
	done
	
	# non-free
	if [ -x /etc/init.d/ipw3945d ]; then
		# non-free, still keep them in mind
		if pidof ipw3945d &>/dev/null; then
			SERVICE_WHITELIST+=( ipw3945d )
		else
			chroot_it dpkg --purge ipw3945d
		fi
	fi
	
	# non-free
	if [ -x /etc/init.d/sl-modem-daemon ]; then
		if pidof slmodemd &>/dev/null; then
			SERVICE_WHITELIST+=( sl-modem-daemon )
		else
			chroot_it dpkg --purge sl-modem-daemon
		fi
	fi
	
	for service in /etc/init.d/*; do
		test -f "$service" || continue
		test -x "$service" || continue

		service=$(basename $service)
		
		case "$service" in 
			rc|rc.local|rcS)
				continue
				;;
		esac
		
		for ((i=0; i<${#SERVICE_WHITELIST[@]}; i++)); do
			# service is in whitelist, next please (loop depth = 2)
			[[ $service == ${SERVICE_WHITELIST[$i]} ]] && continue 2
		done
		
		# service didn't have a match in whitelist, purge it
		chroot_it update-rc.d -f "$service" remove
	done

	# disable all services in /etc/inetd.conf
	if [ -x /etc/init.d/openbsd-inetd ]; then
		chroot_it update-inetd --multi --disable '*'
	fi
	
	# prepare ssh
	if [ /etc/init.d/ssh ]; then
		if [ ! -e "$TARGET_MNT_POINT/etc/ssh/ssh_host_rsa_key" ]; then
			ssh-keygen -q -t rsa -f "$TARGET_MNT_POINT/etc/ssh/ssh_host_rsa_key" -C '' -N ''
		fi
		if [ ! -e "$TARGET_MNT_POINT/etc/ssh/ssh_host_dsa_key" ]; then
			ssh-keygen -q -t dsa -f "$TARGET_MNT_POINT/etc/ssh/ssh_host_dsa_key" -C '' -N ''
		fi
	fi

	# sysv-freeze the rc.d configuration
	[ -x /usr/sbin/freeze-rc.d ] && chroot_it freeze-rc.d	
}

# Everything needed for hw-detection
system_create_modules()
{
	if grep -q ^capability /proc/modules; then
		echo capability >> "$TARGET_MNT_POINT/etc/modules"
	fi
}
